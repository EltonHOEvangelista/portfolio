Full-Stack Command Line

//Back-end
-------------------------------------------------------------------------------
Node JS, Express and MongoDB:
  create back-end folder and server.js
  npm init -y
  npm install express mongoose nodemon cors dotenv axios

	nodemon: automatically restarting the node app when file changes
	cors: to prevent unauthorized access to resources on a web page from different origins.
	dotenv: keep passwords, API keys, and other sensitive data out of your code.

  create ".env" file on backend directory and set:
	PORT=5000
  DB_URI=mongodb+srv://user:pwd%402024@cluster0.pzf1d2h.mongodb.net/dbName

//Front-end using Vite
-------------------------------------------------------------------------------
npm create vite@latest frontend
(only to create a new project. If already exist, run npm install and npm run dev).
cd frontend
npm install axios
npm install react-router-dom
npm run dev

//Root Directory
-------------------------------------------------------------------------------
npm install concurrently --save-dev

Root Package.json
{
  "name": "exam",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "install-concurrently": "npm install concurrently --save-dev",
    "install-client": "cd front-end && npm install axios",
    "install-server": "cd back-end && npm install express mongoose nodemon cors dotenv axios",
    "install": "npm run install-concurrently && npm run install-client && npm run install-server",
    "build-client": "cd front-end && npm run build",
    "build-server": "cd back-end && npm run build",
    "build": "npm run build-client && npm run build-server",
    "start-client": "cd front-end && npm run dev",
    "start-server": "cd back-end && npm start",
    "start": "concurrently \"npm run start-server\" \"npm run start-client\""
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  }
}

//check Frontend and Backend Package.json files

//start app from Root
npm start

//Vercel Deployment
-------------------------------------------------------------------------------
In Backend folder, create vercel.json
{
  "version": 2,
  "builds": [
    {
      "src": "server.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "server.js"
    }
  ]
}

//GitHub: Create new repository on GitHub
-------------------------------------------------------------------------------
//First GitHub upload
echo "# portfolio" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/EltonHOEvangelista/portfolio.git
git push -u origin main

//update GitHub repository
git add .
git commit -m "Your commit message"
git push origin main

//update local code from GitHub Repository.
git status
git fetch
git pull origin main
git commit
git status

//Docker Image
-------------------------------------------------------------------------------
Install Docker Desktop (login: eltonhoevangelista/Vancouver)

//Create Dockerfile on backend or frontend directory. Remove RUN npm run build in backend (required only for frontend)

Terminal:

//Check status
docker --version
docker login

//build docker image on Docker. The -t flag tags your image with a name. The ./ lets Docker know where it can find the Dockerfile.
docker build -t portfolio-backend ./
docker build -t portfolio-app ./

//Frontend: Modify vite.config.js (port 8080 in production and 4173 in local test)
export default defineConfig({
  plugins: [react()],
  preview: {
    host: true,
    port: 8080
  },
})

//Local test
docker run -p 8080:8080 imageID   //backend
docker run -p 4173:4173 imageID   //frontend (vite.config.js must be updated)
//-p 4173:4173 maps port 4173 of the container to port 4173 on your local machine.
//http://localhost:4173 (vite frontend) or 8080 (backend)
//docker logs <container_id>
//docker ps (to see running containers)
//docker stop <container_id>

//Using GCP SDK on Windows, authenticate Docker to your GCP project. 
gcloud auth login
gcloud config set project api-project-627625359026
gcloud auth configure-docker

//push your Docker image to Google Container Registry:
docker tag imageID gcr.io/api-project-627625359026/imageName
e.g.: docker tag sha256:bb76681e61ed394ee03e69afa89b010f63227e59ba9d367fa94e017e5a5746ed gcr.io/api-project-627625359026/portfolio
docker push gcr.io/api-project-627625359026/imageName

//Checking
gcloud container images list

deploy Docker Image to Cloud Run
-------------------------------------------------------------------------------
deploy Docker Image to Cloud Run using GCP Console  or
gcloud run deploy --image gcr.io/api-project-627625359026/imageName:latest --platform managed


Docker update
-------------------------------------------------------------------------------
docker build -t imageName:latest ./
docker tag imageID gcr.io/api-project-627625359026/imageName
docker push gcr.io/api-project-627625359026/imageName
On Docker, remove old version.
deploy Docker Image to Cloud Run using GCP Console


//MongoDB
-------------------------------------------------------------------------------
CLoud:
mongodb: eltonevangelista@icloud.com  pwd: V2024
DB_URI=mongodb+srv://[login]:[password]@cluster0.pzf1d2h.mongodb.net/DBName
Local:
mongodb://localhost:27017/

//MongoDB Command Line
-------------------------------------------------------------------------------
use myfirstdb
show dbs
db.users.insert({username: "abcd", school: "DC"})
db.users.find()
db.users.update({school: "DC"}, {$set: {school: "Douglas College"}})
db.users.remove({school: "BCIT"})

//Postman
-------------------------------------------------------------------------------
GET http://localhost:5000/getusers
GET http://localhost:5000/getuser/?id=1	router.route("/getuser/")
POST http://localhost:5000/adduser
  {
      "id": 5,
      "email": "henrique@me.com",
      "userName": "henrique"
  }
PUT http://localhost:5000/user?id=5
  {...}
DELETE http://localhost:5000/user?id=6


//Frontend using React Babel
-------------------------------------------------------------------------------
npm i react reac-dom
index.html
<script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
<script type="text/babel" src="./app.js"></script>
Right-click on index.html, open with live server

//Frontend using React
-------------------------------------------------------------------------------
npx create-react-app myApp
Create React App tool to set up a new React project with a pre-configured structure, including react and react-dom
cd myApp
npm start

//Others
-------------------------------------------------------------------------------
Pug:	npm install pug		//simplified html page
FS:	npm install fs		//to read/write data from a file
CSV:	npm install csv-parser	// converting CSV text input into arrays or objects

//Unsplash
-------------------------------------------------------------------------------
const response = await axios.get('https://api.unsplash.com/photos/random/', {
  params: {
    query: imgQuery,
    client_id: process.env.UNSPLASH_ACCESS_KEY
  }
});